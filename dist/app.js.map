{"version":3,"sources":["../app/app.js"],"names":["require","initialState","store","history","selectLocationState","rootRoute","component","childRoutes","render","document","getElementById","module","hot","accept"],"mappings":";;AAMA;;AAOA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAKA;;AA6BA;;AAOA;;;;AACA;;;;AA2CA;;;;AA9EA;;;AA3BA;;;;;;AA8BAA,QAAQ,eAAR;;AAEA;;;;;AAVA;;;;;AAdA;;;;;AA6BA;;AAEA;;;;;;AAMA,IAAMC,eAAe,EAArB;AACA,IAAMC,QAAQ,qBAAeD,YAAf,8BAAd;;AAEA;;;;;;;AAOA,IAAME,UAAU,yEAAqCD,KAArC,EAA4C;AAC1DE,uBAAqB;AADqC,CAA5C,CAAhB;AAGA;;;;AAKA,IAAMC,YAAY;AAChBC,2BADgB;AAEhBC,eAAa;AAFG,CAAlB;;AAMA,IAAMC,SAAS,SAATA,MAAS,GAAM;AACnB,qBAASA,MAAT,CACE;AAAA;AAAA,MAAU,OAAON,KAAjB;AACE;AACE,eAASC,OADX;AAEE,cAAQE,SAFV;AAGE;;AAEE;AACA;AACA,8CAAsB,kCAAtB;AAPJ;AADF,GADF,EAaEI,SAASC,cAAT,CAAwB,KAAxB,CAbF;AAeD,CAhBD;;AAkBAF;;AAEA;;;AAGA,IAAIG,OAAOC,GAAX,EAAgB;AACd;;;;AAIAD,SAAOC,GAAP,CAAWC,MAAX;AACD;;AAED;;;;;;AAMA","file":"app.js","sourcesContent":["/**\n * app.js\n *\n * This is the entry file for the application, only setup and boilerplate\n * code.\n */\nimport 'babel-polyfill';\n\n/**\n *\n * TODO: Use manifest, htaccess for dll building\n * Import all the third party stuff\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { applyRouterMiddleware, Router, browserHistory } from 'react-router';\nimport useScroll from 'react-router-scroll';\nimport injectTapEventPlugin from 'react-tap-event-plugin';\nimport { syncHistoryWithStore } from 'react-router-redux';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\n\n/**\n * Import Main scss file, for global styles\n */\nimport './styles/main.scss';\n\n/**\n * Loading normalize css to reset default and normalize CSS properties in different browsers\n */\nrequire('normalize-css');\n\n/**\n * Needed for onTouchTap\n * http:stackoverflow.com/a/34015469/988941\n */\n\ninjectTapEventPlugin();\n\n/**\n * Create redux store with history\n * this uses the singleton browserHistory provided by react-router\n * Optionally, this could be changed to leverage a created history\n * e.g. `const browserHistory = useRouterHistory(createBrowserHistory)();`\n */\nconst initialState = {};\nconst store = configureStore(initialState, browserHistory);\n\n/**\n * Sync history and store, as the react-router-redux reducer\n * is under the non-default key (\"routing\"), selectLocationState\n * must be provided for resolving how to retrieve the \"route\" in the state\n *\n */\nimport { selectLocationState } from './selectors';\nconst history = syncHistoryWithStore(browserHistory, store, {\n  selectLocationState: selectLocationState(),\n});\n/**\n * Set up the router, wrapping all Routes in the App component\n */\nimport App from './modules/Core/components/main';\nimport createRoutes from './routes';\nconst rootRoute = {\n  component: App,\n  childRoutes: createRoutes(),\n};\n\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <Router\n        history={history}\n        routes={rootRoute}\n        render={\n\n          //  Scroll to top when going to a new page, imitating default browser\n          //  behaviour\n          applyRouterMiddleware(useScroll())\n        }\n      />\n    </Provider>,\n    document.getElementById('app')\n  );\n};\n\nrender();\n\n/**\n * accept hot reload only if there is support\n */\nif (module.hot) {\n  /**\n   * modules.hot.accept does not accept dynamic dependencies,\n   * have to be constants at compile-time\n   */\n  module.hot.accept();\n}\n\n/**\n * Install ServiceWorker and AppCache in the end since\n * it's not most important operation and if main code fails,\n * we do not want it installed\n */\nimport { install } from 'offline-plugin/runtime';\ninstall();\n"]}