{"version":3,"sources":["../app/selectors.js"],"names":["selectGlobal","state","get","selectCurrentUser","globalState","selectLoading","selectError","selectLocationState","prevRoutingState","prevRoutingStateJS","routingState","equals","toJS"],"mappings":";;;;;;;AAOA;;AAEA,IAAMA,eAAe,SAAfA,YAAe;AAAA,SAAM,UAACC,KAAD;AAAA,WAAWA,MAAMC,GAAN,CAAU,QAAV,CAAX;AAAA,GAAN;AAAA,CAArB,C,CATA;;;;AAIA;;;;;AAOA,IAAMC,oBAAoB,SAApBA,iBAAoB;AAAA,SAAM,8BAC9BH,cAD8B,EAE9B,UAACI,WAAD;AAAA,WAAiBA,YAAYF,GAAZ,CAAgB,aAAhB,CAAjB;AAAA,GAF8B,CAAN;AAAA,CAA1B;;AAKA,IAAMG,gBAAgB,SAAhBA,aAAgB;AAAA,SAAM,8BAC1BL,cAD0B,EAE1B,UAACI,WAAD;AAAA,WAAiBA,YAAYF,GAAZ,CAAgB,SAAhB,CAAjB;AAAA,GAF0B,CAAN;AAAA,CAAtB;;AAKA,IAAMI,cAAc,SAAdA,WAAc;AAAA,SAAM,8BACxBN,cADwB,EAExB,UAACI,WAAD;AAAA,WAAiBA,YAAYF,GAAZ,CAAgB,OAAhB,CAAjB;AAAA,GAFwB,CAAN;AAAA,CAApB;;AAKA;AACA,IAAMK,sBAAsB,SAAtBA,mBAAsB,GAAM;AAChC,MAAIC,yBAAJ;AACA,MAAIC,2BAAJ;;AAEA,SAAO,UAACR,KAAD,EAAW;AAChB,QAAMS,eAAeT,MAAMC,GAAN,CAAU,OAAV,CAArB,CADgB,CACyB;;AAEzC,QAAI,CAACQ,aAAaC,MAAb,CAAoBH,gBAApB,CAAL,EAA4C;AAC1CA,yBAAmBE,YAAnB;AACAD,2BAAqBC,aAAaE,IAAb,EAArB;AACD;;AAED,WAAOH,kBAAP;AACD,GATD;AAUD,CAdD;;QAiBET,Y,GAAAA,Y;QACAG,iB,GAAAA,iB;QACAE,a,GAAAA,a;QACAC,W,GAAAA,W;QACAC,mB,GAAAA,mB","file":"selectors.js","sourcesContent":["/**\n * The global state selectors\n */\n\n/**\n * This is optional, feel free to read `reselect` module readme\n */\nimport { createSelector } from 'reselect';\n\nconst selectGlobal = () => (state) => state.get('global');\n\nconst selectCurrentUser = () => createSelector(\n  selectGlobal(),\n  (globalState) => globalState.get('currentUser')\n);\n\nconst selectLoading = () => createSelector(\n  selectGlobal(),\n  (globalState) => globalState.get('loading')\n);\n\nconst selectError = () => createSelector(\n  selectGlobal(),\n  (globalState) => globalState.get('error')\n);\n\n// selectLocationState expects a plain JS object for the routing state\nconst selectLocationState = () => {\n  let prevRoutingState;\n  let prevRoutingStateJS;\n\n  return (state) => {\n    const routingState = state.get('route'); // or state.route\n\n    if (!routingState.equals(prevRoutingState)) {\n      prevRoutingState = routingState;\n      prevRoutingStateJS = routingState.toJS();\n    }\n\n    return prevRoutingStateJS;\n  };\n};\n\nexport {\n  selectGlobal,\n  selectCurrentUser,\n  selectLoading,\n  selectError,\n  selectLocationState,\n};\n"]}